{"version":3,"file":"main.6690aa9b825686bafca6.bundle.js","sources":["webpack:///./src/useModelLoader/index.ts"],"sourcesContent":["import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { useState, useEffect, useMemo } from 'react';\n\ntype ModelData = {\n  model: any;\n  modelCenter: THREE.Vector3;\n  progress: number;\n  error: any;\n};\n\nconst manager = new THREE.LoadingManager();\n\nfunction getLoader(type) {\n  switch (type) {\n    case 'gtlf': {\n      return new GLTFLoader(manager);\n    }\n    case 'obj': {\n      return new OBJLoader(manager);\n    }\n    case 'fbx': {\n      return new FBXLoader(manager);\n    }\n    case 'collada': {\n      return new ColladaLoader(manager);\n    }\n  }\n};\n\nconst useModelLoader = (type, src): ModelData => {\n  const loader = useMemo(() => getLoader(type), [type]);\n\n  const [model, setModel] = useState(undefined);\n  const [modelCenter, setModelCenter] = useState<THREE.Vector3>(undefined);\n  const [error, setError] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    loader.load(\n      // resource URL\n      src,\n      // called when the resource is loaded\n      model => setModel(model),\n      // called while loading is progressing\n      ({ loaded, total }) => setProgress((loaded / total) * 100),\n      // called when loading has errors\n      error => setError(error)\n    );\n  }, [loader, src]);\n\n  // get the center of the model\n  useEffect(() => {\n    if (!model) {\n      return;\n    }\n\n    const box = new THREE.Box3();\n\n    box.setFromObject(model.scene);\n\n    const center = new THREE.Vector3();\n\n    box.getCenter(center);\n\n    setModelCenter(center);\n  }, [model]);\n\n  return { model, modelCenter, progress, error };\n};\n\nexport default useModelLoader;\n"],"mappings":"AAcA","sourceRoot":""}